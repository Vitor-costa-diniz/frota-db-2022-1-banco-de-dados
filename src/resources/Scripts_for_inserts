// Tipo Pessoa
        TipoPessoaDAO tipoPessoaDAO = new TipoPessoaDAO();

        // Inserir dados na tabela tipo_pessoa
        TipoPessoa pessoaFisica = new TipoPessoa(0, "pessoa-fisica");
        TipoPessoa pessoaJuridica = new TipoPessoa(0, "pessoa-juridica");

        tipoPessoaDAO.insertTipoPessoa(pessoaFisica);
        tipoPessoaDAO.insertTipoPessoa(pessoaJuridica);

        System.out.println(tipoPessoaDAO.selectAllTipoPessoa());

//Tipo Fase

        TipoFaseDAO tipoFaseDAO = new TipoFaseDAO();

        TipoFase tipoFaseO1 = new TipoFase(0, "monofasico");
        TipoFase tipoFaseO2 = new TipoFase(1, "bifasico");
        TipoFase tipoFaseO3 = new TipoFase(2, "trifasico");

        tipoFaseDAO.insertTipoFase(tipoFaseO1);
        tipoFaseDAO.insertTipoFase(tipoFaseO2);
        tipoFaseDAO.insertTipoFase(tipoFaseO3);

        System.out.println(tipoFaseDAO.selectAllTipoFase());

//Pessoa
        PessoaDAO pessoaDAO = new PessoaDAO();

        Pessoa pessoa = new Pessoa(0, "Vitor", "12345678910", "", 1);

        Pessoa pessoa = new Pessoa(0, "Bruno", "12744678910", "", 1);

        pessoaDAO.insertPessoa(pessoa);

        System.out.println(pessoaDAO.selectAllPessoa());

    }

//Cliente
             ClienteDAO clienteDAO = new ClienteDAO();

             Cliente cliente = new Cliente(0, "Vitor", "12345678910", 2);

             clienteDAO.insertCliente(cliente);

             System.out.println(clienteDAO.selectAllCliente());
         }

//Funcionario

            FuncionarioDAO funcionarioDAO = new FuncionarioDAO();


            Funcionario funcionario = new Funcionario(0, "123123123", 4);

            funcionarioDAO.insertFuncionario(funcionario);

            System.out.println(funcionarioDAO.selectAllFuncionario());

//Rota

            RotaDAO rotaDAO = new RotaDAO();

            Rota rota01 = new Rota(0, "Fortaleza");
            Rota rota02 = new Rota(0, "Aquiraz");
            Rota rota03 = new Rota(0, "Quixada");

            rotaDAO.insertRota(rota01);
            rotaDAO.insertRota(rota02);
            rotaDAO.insertRota(rota03);

            System.out.println(rotaDAO.selectAllRota());

//Classe

           ClasseDAO classeDAO = new ClasseDAO();

           Classe classe = new Classe(0, "Classe B", 1);

           classeDAO.insertClasse(classe);

            System.out.println(classeDAO.selectAllClasse());


//Poste

            PosteDAO posteDAO = new PosteDAO();

            Poste poste = new Poste(0, "3.7415140 ", "38.5094247", "123456", "");

            posteDAO.insertPoste(poste);

            System.out.println(posteDAO.selectAllPoste());

//TarefaRota

           TarefaRotaDAO tarefaRotaDAO = new TarefaRotaDAO();

            Timestamp timestamp1 = new Timestamp(System.currentTimeMillis());
            Timestamp timestamp2 = new Timestamp(System.currentTimeMillis() + 1);

            TarefaRota tarefaRota = new TarefaRota(0, "", timestamp1, timestamp2, "Rotacionar",1 );

            tarefaRotaDAO.insertTarefaRota(tarefaRota);

            System.out.println(tarefaRotaDAO.selectAllTarefaRota());

//Time Rota

       TimeRotaDAO timeRotaDAO = new TimeRotaDAO();

        TimeRota timeRota = new TimeRota(0, 1, 1);

        timeRotaDAO.insertTimeRota(timeRota);

        System.out.println(timeRotaDAO.selectAllTimeRota());

// Medidor

        MedidorDAO medidorDAO = new MedidorDAO();

        Medidor medidor = new Medidor(0, "Casa", 1, 1);

        medidorDAO.insertMedidor(medidor);

        System.out.println(medidorDAO.selectAllMedidor());


// Tarifa

        TarifaDAO tarifaDAO = new TarifaDAO();

        Timestamp timestamp1 = new Timestamp(System.currentTimeMillis());
        Timestamp timestamp2 = new Timestamp(System.currentTimeMillis());

        Tarifa tarifa = new Tarifa(0, "0.1", 1, "PL3260", timestamp1, timestamp2,"0.07");

        tarifaDAO.insertTarifa(tarifa);

        System.out.println(tarifaDAO.selectAllTarifa());


// Medicao

        MedicaoDAO medicaoDAO = new MedicaoDAO();

        Timestamp timestamp = new Timestamp(System.currentTimeMillis());

        Medicao medicao = new Medicao(0, "06", "2023", timestamp, "152,2 kWh/mês", 1, 2);

        medicaoDAO.insertMedicao(medicao);

        System.out.println(medicaoDAO.selectAllMedicao());

//Cobranca

       CobrancaDAO cobrancaDAO = new CobrancaDAO();

       Cobranca cobranca = new Cobranca(0, "06", "2023", 1, 1);

       cobrancaDAO.insertCobranca(cobranca);

       System.out.println(cobrancaDAO.selectAllCobranca());

//Contrato

     ContratoDAO contratoDAO = new ContratoDAO();

            Timestamp timestamp1 = new Timestamp(System.currentTimeMillis());
            Timestamp timestamp2 = new Timestamp(System.currentTimeMillis() + 1);
    

            Contrato contrato = new Contrato(0, "Mora Solo", timestamp1, timestamp2, 1, 1, 3);

            contratoDAO.insertContrato(contrato);

            System.out.println(contratoDAO.selectAllContrato());

//Função para Criar tabelas no banco

    public static void criarTabelas() {
        String[] createTableQueries = {
                "CREATE TABLE IF NOT EXISTS tipo_fase(" +
                        "id SERIAL PRIMARY KEY," +
                        "descricao VARCHAR(45)" +
                        ");",

                "CREATE TABLE IF NOT EXISTS classe(" +
                        "id SERIAL PRIMARY KEY," +
                        "descricao VARCHAR(45)," +
                        "id_tipo_fase INT REFERENCES tipo_fase(id)" +
                        ");",

                "CREATE TABLE IF NOT EXISTS tarifa(" +
                        "id SERIAL PRIMARY KEY," +
                        "taxa VARCHAR(45)," +
                        "classe INT REFERENCES classe(id)," +
                        "lei VARCHAR(45) NOT NULL," +
                        "data_inicio TIMESTAMP NOT NULL," +
                        "data_final TIMESTAMP NOT NULL" +
                        "aliquota_ICMS VARCHAR(45)" +
                        ");",

                "CREATE TABLE IF NOT EXISTS tipo_pessoa(" +
                        "id SERIAL PRIMARY KEY," +
                        "descricao VARCHAR(45)" +
                        ");",

                "CREATE TABLE IF NOT EXISTS pessoa(" +
                        "id SERIAL PRIMARY KEY," +
                        "nome VARCHAR(45) NOT NULL," +
                        "cpf VARCHAR(45) NOT NULL," +
                        "cnpj VARCHAR(45)," +
                        "tipo_pessoa_id INT REFERENCES tipo_pessoa(id)" +
                        ");",

                "CREATE TABLE IF NOT EXISTS funcionario(" +
                        "id SERIAL PRIMARY KEY," +
                        "codigo_funcional VARCHAR(45) NOT NULL," +
                        "pessoa_id INT REFERENCES pessoa(id)" +
                        ");",

                "CREATE TABLE IF NOT EXISTS cliente (" +
                        "id SERIAL PRIMARY KEY," +
                        "num_documento VARCHAR(45) NOT NULL UNIQUE," +
                        "num_cliente VARCHAR(45) NOT NULL UNIQUE," +
                        "pessoa_id INT REFERENCES pessoa(id)" +
                        ");",

                "CREATE TABLE IF NOT EXISTS rota(" +
                        "id SERIAL PRIMARY KEY," +
                        "descricao VARCHAR(45)" +
                        ");",

                "CREATE TABLE IF NOT EXISTS poste(" +
                        "id SERIAL PRIMARY KEY," +
                        "latitude VARCHAR(45)," +
                        "longitude VARCHAR(45)," +
                        "codigo VARCHAR(45)," +
                        "obervacao VARCHAR(45)" +
                        ");",

                "CREATE TABLE IF NOT EXISTS medidor(" +
                        "id SERIAL PRIMARY KEY," +
                        "descricao VARCHAR(45)," +
                        "rota_id INT REFERENCES rota(id)," +
                        "poste_id INT REFERENCES poste(id)" +
                        ");",

                "CREATE TABLE IF NOT EXISTS tarefa_rota(" +
                        "id SERIAL PRIMARY KEY," +
                        "observacao VARCHAR(45)," +
                        "data_inicio TIMESTAMP," +
                        "data_fim TIMESTAMP," +
                        "tarefa_rotacao VARCHAR (45)," +
                        "rota_id INT REFERENCES rota(id)" +
                        ");",

                "CREATE TABLE IF NOT EXISTS time_rota (" +
                        "id SERIAL PRIMARY KEY," +
                        "funcionario_id INT REFERENCES funcionario(id)," +
                        "tarefa_rota_id INT REFERENCES tarefa_rota(id)" +
                        ");",

                "CREATE TABLE IF NOT EXISTS medicao(" +
                        "id SERIAL PRIMARY KEY," +
                        "mes VARCHAR(45)," +
                        "ano VARCHAR(45)," +
                        "data_medicao TIMESTAMP," +
                        "consumo VARCHAR(45)," +
                        "medidor_id INT REFERENCES medidor(id)," +
                        "time_rota_id INT REFERENCES time_rota(id)" +
                        ");",

                "CREATE TABLE IF NOT EXISTS cobranca(" +
                        "id SERIAL PRIMARY KEY," +
                        "mes_referencia VARCHAR(45)," +
                        "ano_referencia VARCHAR(45)," +
                        "tarifa_id INT REFERENCES tarifa(id)," +
                        "medicao_id INT REFERENCES medicao(id)" +
                        ");",

                "CREATE TABLE IF NOT EXISTS contrato (" +
                        "id SERIAL PRIMARY KEY," +
                        "descricao VARCHAR(45)," +
                        "data_inicio TIMESTAMP," +
                        "data_criacao TIMESTAMP," +
                        "medidor_id INT REFERENCES medidor(id)," +
                        "classe_id INT REFERENCES classe(id)," +
                        "cliente_id INT REFERENCES cliente(id)" +
                        ");"
        };

        try (Connection connection = conexaoDB(); Statement statement = connection.createStatement()) {
            for (String query : createTableQueries) {
                statement.executeUpdate(query);
            }

            System.out.println("Tabelas criadas com sucesso!");
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
